generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String        @id @default(uuid())
  name         String
  description  String?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  address      String?
  contactEmail String?
  contactPhone String?
  caseDetails  CaseDetails[]
  categories   Category[]
  items        StolenItem[]
  users        User[]

  @@map("tenants")
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  name                 String
  username             String       @unique
  password             String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  role                 Role         @default(property_owner)
  address              String?
  avatar               String?
  bio                  String?
  city                 String?
  company              String?
  country              String?
  emailVerified        Boolean      @default(false)
  isActive             Boolean      @default(true)
  lastLoginAt          DateTime?
  phone                String?
  preferences          String?
  state                String?
  title                String?
  zipCode              String?
  dashboardSnapshot    DashboardSnapshot?
  accessLevel          AccessLevel? @default(owner)
  tenantId             String?      @default("tenant-1")
  passwordResetExpires DateTime?
  passwordResetToken   String?
  verificationExpires  DateTime?
  verificationToken    String?
  items                StolenItem[]
  tenant               Tenant?      @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model StolenItem {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String
  serialNumber       String?
  purchaseDate       String
  purchaseCost       Float
  dateLastSeen       String
  locationLastSeen   String
  estimatedValue     Float
  category           String              @default("other")
  notes              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  ownerId            String
  tenantId           String?             @default("tenant-1")
  tags               Json?
  evidence           Evidence[]
  investigationNotes InvestigationNote[]
  owner              User                @relation(fields: [ownerId], references: [id])
  tenant             Tenant?             @relation(fields: [tenantId], references: [id])

  @@map("stolen_items")
}

model Evidence {
  id             Int        @id @default(autoincrement())
  type           String
  cloudinaryId   String?
  originalName   String?
  description    String?
  createdAt      DateTime   @default(now())
  itemId         Int
  documentData   Bytes?
  url            String?
  fileSize       Int?
  mimeType       String?
  uploadedBy     String?
  uploadedByName String?
  uploadedByRole String?
  item           StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

model InvestigationNote {
  id             Int        @id @default(autoincrement())
  itemId         Int
  content        String
  createdBy      String
  createdByName  String
  createdByRole  String
  isConfidential Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  item           StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("investigation_notes")
}

model CaseDetails {
  id              String              @id @default(cuid())
  tenantId        String
  caseName        String
  caseNumber      String?
  dateReported    DateTime
  dateOccurred    DateTime
  location        String
  status          String              @default("open")
  priority        String              @default("medium")
  assignedOfficer String?
  description     String
  createdBy       String
  createdByName   String
  createdByRole   String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  caseEvidence    CaseEvidence[]
  permissions     CasePermission[]
  suspects        CaseSuspect[]
  timeline        CaseTimelineEvent[]
  updates         CaseUpdate[]

  @@map("case_details")
}

model CaseTimelineEvent {
  id            String      @id @default(cuid())
  caseId        String
  date          DateTime
  time          String
  event         String
  description   String
  createdBy     String
  createdByName String
  createdByRole String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  case          CaseDetails @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_timeline_events")
}

model CaseSuspect {
  id            String      @id @default(cuid())
  caseId        String
  name          String
  description   String
  address       String?
  phone         String?
  status        String      @default("active")
  createdBy     String
  createdByName String
  createdByRole String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  case          CaseDetails @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_suspects")
}

model CaseEvidence {
  id            String      @id @default(cuid())
  caseId        String
  type          String
  description   String
  location      String
  collectedBy   String
  dateCollected DateTime
  createdBy     String
  createdByName String
  createdByRole String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  case          CaseDetails @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_evidence")
}

model CaseUpdate {
  id            String      @id @default(cuid())
  caseId        String
  date          DateTime
  update        String
  createdBy     String
  createdByName String
  createdByRole String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  case          CaseDetails @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_updates")
}

model CasePermission {
  id            String      @id @default(cuid())
  caseId        String
  userId        String
  canView       Boolean     @default(true)
  canEdit       Boolean     @default(false)
  canDelete     Boolean     @default(false)
  grantedBy     String
  grantedByName String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  case          CaseDetails @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@unique([caseId, userId])
  @@map("case_permissions")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  tenantId    String
  isSystem    Boolean  @default(false)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, name])
  @@map("categories")
}

model AuditLog {
  id           String   @id @default(cuid())
  userId       String?
  username     String?
  action       String
  resource     String?
  resourceType String?
  details      Json?
  ipAddress    String?
  userAgent    String?
  timestamp    DateTime @default(now())
  success      Boolean  @default(true)
  severity     String   @default("info")

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([resource])
  @@index([resourceType])
  @@index([success])
  @@map("audit_logs")
}

enum Role {
  property_owner
  law_enforcement
  insurance_agent
  broker
  banker
  asset_manager
  assistant
  secretary
  manager
  executive_assistant
  super_admin
}

enum AccessLevel {
  owner
  staff
  stakeholder
  view_only
}

model DashboardSnapshot {
  id                 Int       @id @default(autoincrement())
  userId             String
  tenantId           String?
  totalItems         Int
  totalValue         Float
  totalEvidenceFiles Int
  photosCount        Int
  videosCount        Int
  documentsCount     Int
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("dashboard_snapshots")
}
