generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String        @id @default(uuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  items       StolenItem[]
  users       User[]
  caseDetails CaseDetails[]
  categories  Category[]

  @@map("tenants")
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  name                 String
  username             String       @unique
  password             String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  role                 Role         @default(property_owner)
  address              String?
  avatar               String?
  bio                  String?
  city                 String?
  company              String?
  country              String?
  emailVerified        Boolean      @default(false)
  isActive             Boolean      @default(true)
  lastLoginAt          DateTime?
  phone                String?
  preferences          String?
  state                String?
  title                String?
  zipCode              String?
  accessLevel          AccessLevel? @default(owner)
  tenantId             String?      @default("tenant-1")
  passwordResetExpires DateTime?
  passwordResetToken   String?
  verificationExpires  DateTime?
  verificationToken    String?
  items                StolenItem[]
  tenant               Tenant?      @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model StolenItem {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  serialNumber        String?
  purchaseDate        String
  purchaseCost        Float
  dateLastSeen        String
  locationLastSeen    String
  estimatedValue      Float
  category            String                @default("other") // Required field with default value
  tags                Json?                  // Store as JSON array for proper multi-tag support
  notes               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ownerId             String
  tenantId            String?               @default("tenant-1")
  evidence            Evidence[]
  investigationNotes  InvestigationNote[]
  owner               User                  @relation(fields: [ownerId], references: [id])
  tenant              Tenant?               @relation(fields: [tenantId], references: [id])

  @@map("stolen_items")
}

model Evidence {
  id             Int        @id @default(autoincrement())
  type           String
  cloudinaryId   String?
  url            String?
  originalName   String?
  description    String?
  fileSize       Int?
  mimeType       String?
  uploadedBy     String?
  uploadedByName String?
  uploadedByRole String?
  createdAt      DateTime   @default(now())
  itemId         Int
  documentData   Bytes?
  item           StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

model InvestigationNote {
  id              Int        @id @default(autoincrement())
  itemId          Int
  content         String     @db.Text
  createdBy       String
  createdByName   String
  createdByRole   String
  isConfidential  Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  item            StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("investigation_notes")
}

model CaseDetails {
  id                String          @id @default(cuid())
  tenantId          String
  caseName          String
  caseNumber        String?
  dateReported      DateTime
  dateOccurred      DateTime
  location          String          @db.Text
  status            String          @default("open") // open, investigating, closed
  priority          String          @default("medium") // low, medium, high, critical
  assignedOfficer   String?
  description       String          @db.Text
  createdBy         String
  createdByName     String
  createdByRole     String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  tenant            Tenant          @relation(fields: [tenantId], references: [id])
  timeline          CaseTimelineEvent[]
  suspects          CaseSuspect[]
  caseEvidence      CaseEvidence[]
  updates           CaseUpdate[]
  permissions       CasePermission[]

  @@map("case_details")
}

model CaseTimelineEvent {
  id              String       @id @default(cuid())
  caseId          String
  date            DateTime
  time            String
  event           String
  description     String       @db.Text
  createdBy       String
  createdByName   String
  createdByRole   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  case            CaseDetails  @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_timeline_events")
}

model CaseSuspect {
  id              String       @id @default(cuid())
  caseId          String
  name            String
  description     String       @db.Text
  address         String?
  phone           String?
  status          String       @default("active") // active, cleared, arrested
  createdBy       String
  createdByName   String
  createdByRole   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  case            CaseDetails  @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_suspects")
}

model CaseEvidence {
  id              String       @id @default(cuid())
  caseId          String
  type            String
  description     String       @db.Text
  location        String
  collectedBy     String
  dateCollected   DateTime
  createdBy       String
  createdByName   String
  createdByRole   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  case            CaseDetails  @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_evidence")
}

model CaseUpdate {
  id              String       @id @default(cuid())
  caseId          String
  date            DateTime
  update          String       @db.Text
  createdBy       String
  createdByName   String
  createdByRole   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  case            CaseDetails  @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_updates")
}

model CasePermission {
  id              String       @id @default(cuid())
  caseId          String
  userId          String
  canView         Boolean      @default(true)
  canEdit         Boolean      @default(false)
  canDelete       Boolean      @default(false)
  grantedBy       String
  grantedByName   String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  case            CaseDetails  @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@unique([caseId, userId])
  @@map("case_permissions")
}

enum Role {
  property_owner
  law_enforcement
  insurance_agent
  broker
  banker
  asset_manager
  assistant
  secretary
  manager
  executive_assistant
  super_admin
}

enum AccessLevel {
  owner
  staff
  stakeholder
  view_only
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String?
  tenantId    String
  isSystem    Boolean  @default(false) // System categories cannot be deleted
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  
  @@unique([tenantId, name]) // Ensure unique category names per tenant
  @@map("categories")
}

// AUDIT LOGGING - Critical for Law Enforcement Chain of Custody
model AuditLog {
  id          String   @id @default(cuid())
  userId      String?  // Null for failed logins or anonymous actions
  username    String?  // Denormalized for query performance
  action      String   // 'login', 'logout', 'view_evidence', 'modify_case', etc.
  resource    String?  // 'evidence:123', 'case:456', 'user:789', etc.
  resourceType String? // 'evidence', 'case', 'user', 'item', etc.
  details     Json?    // Additional context (before/after values, metadata)
  ipAddress   String?  // Client IP address
  userAgent   String?  // Browser/client information
  timestamp   DateTime @default(now())
  success     Boolean  @default(true) // false for failed attempts
  severity    String   @default("info") // 'info', 'warning', 'error', 'critical'
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([resource])
  @@index([resourceType])
  @@index([success])
  @@map("audit_logs")
}
