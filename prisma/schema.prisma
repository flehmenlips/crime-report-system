// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  property_owner
  law_enforcement
  insurance_agent
  broker
  banker
  asset_manager
  assistant
  secretary
  manager
  executive_assistant
}

enum AccessLevel {
  owner          // Property owner - full control
  staff          // Internal staff - read/write access
  stakeholder    // External stakeholders - read/search/add notes
  view_only      // View only access
}

model Tenant {
  id          String   @id @default(uuid())
  name        String   // e.g., "Birkenfeld Farm", "Smith Property", etc.
  description String?  // Optional description
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  items       StolenItem[]
  
  @@map("tenants")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  username    String   @unique
  password    String
  role        Role     @default(property_owner)
  accessLevel AccessLevel? @default(owner) // Access level within tenant
  
  // Extended profile fields
  phone       String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  company     String?
  title       String?
  bio         String?
  avatar      String?  // URL to avatar image
  
  // Account settings
  emailVerified Boolean @default(false)
  isActive      Boolean @default(true)
  lastLoginAt   DateTime?
  preferences   String? // JSON string for user preferences
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tenant relationship
  tenantId    String?  @default("tenant-1")
  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  
  // Relations
  items       StolenItem[]
  
  @@map("users")
}

model StolenItem {
  id                Int      @id @default(autoincrement())
  name              String
  description       String
  serialNumber      String?
  purchaseDate      String
  purchaseCost      Float
  dateLastSeen      String
  locationLastSeen  String
  estimatedValue    Float
  category          String?
  tags              String?  // JSON string of tags array
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Tenant isolation
  tenantId          String?  @default("tenant-1")
  tenant            Tenant?  @relation(fields: [tenantId], references: [id])
  
  // Relations
  ownerId           String
  owner             User     @relation(fields: [ownerId], references: [id])
  evidence          Evidence[]
  
  @@map("stolen_items")
}

model Evidence {
  id            Int        @id @default(autoincrement())
  type          String     // photo, video, document
  cloudinaryId  String?    // Cloudinary public ID (for photos/videos; null for documents stored in DB)
  documentData  Bytes?     // Binary data for documents (PostgreSQL BYTEA; null for Cloudinary media)
  originalName  String?    // Original filename
  description   String?
  createdAt     DateTime   @default(now())
  
  // Relations
  itemId        Int
  item          StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@map("evidence")
}
