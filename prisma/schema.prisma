generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id          String       @id @default(uuid())
  name        String
  description String?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  items       StolenItem[]
  users       User[]

  @@map("tenants")
}

model User {
  id                   String       @id @default(uuid())
  email                String       @unique
  name                 String
  username             String       @unique
  password             String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  role                 Role         @default(property_owner)
  address              String?
  avatar               String?
  bio                  String?
  city                 String?
  company              String?
  country              String?
  emailVerified        Boolean      @default(false)
  isActive             Boolean      @default(true)
  lastLoginAt          DateTime?
  phone                String?
  preferences          String?
  state                String?
  title                String?
  zipCode              String?
  accessLevel          AccessLevel? @default(owner)
  tenantId             String?      @default("tenant-1")
  passwordResetExpires DateTime?
  passwordResetToken   String?
  verificationExpires  DateTime?
  verificationToken    String?
  items                StolenItem[]
  tenant               Tenant?      @relation(fields: [tenantId], references: [id])

  @@map("users")
}

model StolenItem {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  serialNumber        String?
  purchaseDate        String
  purchaseCost        Float
  dateLastSeen        String
  locationLastSeen    String
  estimatedValue      Float
  category            String                @default("other") // Required field with default value
  tags                String?
  notes               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ownerId             String
  tenantId            String?               @default("tenant-1")
  evidence            Evidence[]
  investigationNotes  InvestigationNote[]
  owner               User                  @relation(fields: [ownerId], references: [id])
  tenant              Tenant?               @relation(fields: [tenantId], references: [id])

  @@map("stolen_items")
}

model Evidence {
  id             Int        @id @default(autoincrement())
  type           String
  cloudinaryId   String?
  url            String?
  originalName   String?
  description    String?
  fileSize       Int?
  mimeType       String?
  uploadedBy     String?
  uploadedByName String?
  uploadedByRole String?
  createdAt      DateTime   @default(now())
  itemId         Int
  documentData   Bytes?
  item           StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

model InvestigationNote {
  id              Int        @id @default(autoincrement())
  itemId          Int
  content         String     @db.Text
  createdBy       String
  createdByName   String
  createdByRole   String
  isConfidential  Boolean    @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  item            StolenItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("investigation_notes")
}

enum Role {
  property_owner
  law_enforcement
  insurance_agent
  broker
  banker
  asset_manager
  assistant
  secretary
  manager
  executive_assistant
  super_admin
}

enum AccessLevel {
  owner
  staff
  stakeholder
  view_only
}
